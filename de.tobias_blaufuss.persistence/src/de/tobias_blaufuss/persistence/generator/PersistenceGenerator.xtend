/*
 * generated by Xtext 2.12.0
 */
package de.tobias_blaufuss.persistence.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.tobias_blaufuss.persistence.persistence.PersistenceModel
import de.tobias_blaufuss.persistence.persistence.PropertyField
import de.tobias_blaufuss.persistence.persistence.Type
import de.tobias_blaufuss.persistence.persistence.Cardinality
import de.tobias_blaufuss.persistence.persistence.EntityField
import de.tobias_blaufuss.persistence.persistence.Entity
import java.util.LinkedList
import de.tobias_blaufuss.persistence.persistence.StringType
import de.tobias_blaufuss.persistence.persistence.IntegerType
import de.tobias_blaufuss.persistence.persistence.TypeOption
import java.util.List
import de.tobias_blaufuss.persistence.persistence.UniqueOption
import de.tobias_blaufuss.persistence.persistence.NotNullOption

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PersistenceGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		for (e : resource.allContents.toIterable.filter(PersistenceModel)) {
			fsa.generateFile('model.py', e.compileModel)
		}
	}

	def compileModel(PersistenceModel model) '''
		from app_vars import CONTAINER
		DB = CONTAINER.bundle.db
		
		«compileManyToManySecondaryTables(model)»
		
		«FOR entity : model.entities»
			class «entity.name»(DB.Model):
				__tablename__ = '«entity.name.toLowerCase»'
				id = DB.Column(DB.Integer, primary_key=True)
				
				// Attributes
				«FOR property: entity.fields.filter(PropertyField)»
					«property.compilePropertyField»
				«ENDFOR»
				
				
		«ENDFOR»
	'''

	def compilePropertyField(PropertyField property) '''
		«property.name» = DB.Column(DB.«property.type.compilePropertyType»«property.options.compileFieldOptions»)
	'''

	def compileFieldOptions(List<TypeOption> options) {
		if(options.empty) return ''
		return '''«FOR option : options», «option.compileTypeOption»«ENDFOR»'''
	}

	def compileTypeOption(TypeOption option) {

		switch option {
			UniqueOption: return '''unique=«(if(option.unique) PythonConstants.TRUE else PythonConstants.FALSE)»'''
			NotNullOption: return '''nullable=«(if(option.notNull) PythonConstants.FALSE else PythonConstants.TRUE)»'''
		}
	}

	def compilePropertyType(Type type) {
		switch type {
			StringType: return '''String(«resolveStringTypeCount(type)»)'''
			IntegerType: return "Integer"
		}
	}

	def compileManyToManySecondaryTables(PersistenceModel model) {
		val manyToManyRelations = gatherFieldsWithCardinality(model, Cardinality.MANY_TO_MANY)
		val result = new LinkedList
		for (relation : manyToManyRelations) {
			val source = relation.eContainer as Entity
			val destination = relation.entityReference
			val srcDestStr = '''«source.name»_«destination.name»'''
			result.add('''
				«srcDestStr.toUpperCase»_TABLE = DB.Table('«srcDestStr.toLowerCase»', DB.Model.metadata,
														  «source.compileMergeTableRelationship»,
														  «destination.compileMergeTableRelationship»)
			''')
		}

		return '''
			«FOR str : result»
				«str»
				
			«ENDFOR»
		'''
	}

	def compileMergeTableRelationship(Entity entity) '''
		DB.Column('«entity.name.toLowerCase»_id',
				  DB.Integer,
				  DB.ForeignKey('«entity.name.toLowerCase».id'),
				  nullable=False)
	'''

	def resolveStringTypeCount(StringType stringType) {
		if (stringType.count <= 0) {
			return 50
		} else {
			return stringType.count
		}
	}

	def gatherFieldsWithCardinality(PersistenceModel model, Cardinality cardinality) {
		val allFieldsWithCardinality = model.entities.map[e|e.fields].flatten.filter(EntityField).filter [f |
			f.cardinality == cardinality
		]
		return allFieldsWithCardinality
	}
}
